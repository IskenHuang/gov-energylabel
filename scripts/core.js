// Generated by CoffeeScript 1.6.2
(function() {
  var cheerio, exports, fs, iconv, request, url;

  fs = require('fs');

  request = require('request');

  cheerio = require('cheerio');

  iconv = require('iconv-lite');

  url = require('url');

  exports = module.exports = {
    baseURL: 'http://www.energylabel.org.tw',
    targetURL: this.baseURL + 'purchasing/compare/list.asp',
    getHtml: function(url, cb) {
      var _this = this;

      request({
        url: url,
        encoding: 'binary'
      }, function(error, response) {
        var $, fn, tmpArray, _buf, _html;

        if (!error && response.statusCode === 200) {
          _buf = iconv.encode(response.body, 'binary');
          _html = iconv.decode(_buf, 'big5');
          $ = cheerio.load(_html);
          tmpArray = url.split('/');
          fn = tmpArray[tmpArray.length - 1].split('.')[0];
          _this.savefile(new Date().getTime() + '_' + fn, _html);
          return cb($);
        } else {
          return console.log('error = ', error, ' | url = ', url);
        }
      });
      return this;
    },
    getHtmlLinks: function($, cb) {
      var _array;

      _array = [];
      $('html a').each(function(index, item) {
        var _url;

        _url = $(item).attr('href');
        if (_url.indexOf('/purchasing/compare') >= 0 && _array.indexOf(_url) < 0 && _array.indexOf('list.asp') < 0) {
          return _array.push(_url);
        }
      });
      return _array;
    },
    getHtmlSelect: function($select) {
      var _array;

      _array = [];
      $select.find('option').each(function(_index, _item) {
        var obj;

        obj = {
          index: _index,
          text: $(_item).text(),
          value: $(_item).attr('value')
        };
        return _array.push(obj);
      });
      return _array;
    },
    getHtmlForm: function(options, cb) {
      var _body,
        _this = this;

      if (options == null) {
        options = {
          url: '',
          body: {}
        };
      }
      options.headers = {
        'content-type': 'application/x-www-form-urlencoded'
      };
      options.method = 'POST';
      options.encoding = 'binary';
      _body = url.format({
        query: options.body
      });
      options.body = _body.substring(1, _body.length);
      return request(options, function(error, response) {
        var $, fn, tmpArray, _buf, _html;

        if (!error && response.statusCode === 200) {
          _buf = iconv.encode(response.body, 'binary');
          _html = iconv.decode(_buf, 'big5');
          $ = cheerio.load(_html);
          tmpArray = options.url.split('/');
          fn = tmpArray[tmpArray.length - 1].split('.')[0];
          _this.savefile(new Date().getTime() + '_' + fn + '_' + _body, _html);
          return cb($);
        } else {
          console.log('error = ', error);
          return console.log('options = ', options);
        }
      });
    },
    getFile: function(path, cb) {
      return fs.readFile(path, function(err, data) {
        if (err) {
          return console.log('err = ', err);
        } else {
          return cb(data);
        }
      });
    },
    getFileHtml: function(path, cb) {
      return fs.readFile(path, function(err, data) {
        var $;

        if (err) {
          return console.log('err = ', err);
        } else {
          $ = cheerio.load(data);
          return cb($);
        }
      });
    },
    savefile: function(name, data) {
      return fs.writeFile('./data/' + name + '.html', data, function(err) {
        if (err) {
          return console.log('err = ', err);
        } else {
          return console.log('saved file ' + name + '.html');
        }
      });
    }
  };

}).call(this);
